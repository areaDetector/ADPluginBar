# Database for NDBar Plugin
# Jakub Wlodek
# February 12, 2018

include "NDPluginBase.template"


# records needed in database:
# barcode value
# barcode found
# barcode location
# barcode type
# numbercodes

#first strings for message and type as waveforms
record(waveform, "$(P)$(R)BarcodeMessage")
{
	field(DTYP, "asynOctetWrite")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))BARCODE_MESSAGE")
	field(FTLV, "CHAR")
	field(NELM, "256")
}

record(waveform, "$(P)$(R)BarcodeType")
{
	field(DTYP, "asynOctetWrite")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))BARCODE_TYPE")
	field(FTLV, "CHAR")
	field(NELM, "256")
}

record(waveform, "$(P)$(R)BarcodeMessage_RBV"){
	field(DTYP, "octetRead")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))BARCODE_MESSAGE")
        field(FTVL, "CHAR")
        field(NELM, "256")
	field(SCAN, "I/O Intr")
}

record(waveform, "$(P)$(R)BarcodeType_RBV")
{
	field(DTYP, "octetRead")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))BARCODE_TYPE")
        field(FTVL, "CHAR")
        field(NELM, "256")
	field(SCAN, "I/O Intr")
}

#binary check if barcode was found
record(bi, "$(P)$(R)BarcodeFound")
{
        field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))BARCODE_FOUND")
	field(OSV, "MINOR")
	field(ZSV, "NO_ALARM")
	field(ZNAM, "No")
	field(ONAM, "Yes")
	field(SCAN, "I/O Intr")
}

#number of codes
record(ai, "$(P)$(R)NumberCodes")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))NUMBER_CODES")
	field(OSV, "MINOR")
	field(ZSV, "NO_ALARM")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)NumberCodes_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))NUMBER_CODES")
	field(SCAN, "I/O Intr")
}	

#cooridnates of corners of discovered barcodes
record(ai, "$(P)$(R)UpperRightX")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_RIGHT_X")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)UpperLeftX")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_LEFT_X")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)LowerRightX")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOWER_RIGHT_X")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)LowerLeftX")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOWER_LEFT_X")
	field(SCAN, "I/O Intr")
}

record(ao "$(P)$(R)UpperLeftX_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_LEFT")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)UpperRightX_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_RIGHT_X")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)LowerLeftX_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Lower_LEFT_X")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)LowerRightX_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOWER_RIGHT_X")
	field(SCAN, "I/O Intr")
}

#cooridnates of corners of discovered barcodes
record(ai, "$(P)$(R)UpperRightY")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_RIGHT_Y")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)UpperLeftY")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_LEFT_Y")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)LowerRightY")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOWER_RIGHT_Y")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)LowerLeftY")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOWER_LEFT_Y")
	field(SCAN, "I/O Intr")
}

record(ao "$(P)$(R)UpperLeftY_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_LEFT_Y")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)UpperRightY_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_RIGHT_Y")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)LowerLeftY_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Lower_LEFT_Y")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)LowerRightY_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOWER_RIGHT_Y")
	field(SCAN, "I/O Intr")
}
