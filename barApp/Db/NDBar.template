# Database for NDBar Plugin
# Jakub Wlodek
# February 12, 2018

# include the base driver template file
include "NDPluginBase.template"


# Records needed in database:
# Barcode value/message -> the text stored in the barcode
# Barcode location -> coordinates of the corners of the bar code, so that it can be displayed on the image
# Barcode type -> QR, 2D Bar etc.
# Number of codes -> number of barcodes in an image


##################################################################
# First stringin/stringout records to store the barcode message
# and the barcode type.
##################################################################

record(stringin, "$(P)$(R)BarcodeMessage_RBV"){
	field(DTYP, "asynOctetRead")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))BARCODE_MESSAGE")
        field(VAL, "No Barcode Found")
	field(SCAN, "I/O Intr")
}

record(stringin, "$(P)$(R)BarcodeType_RBV")
{
	field(DTYP, "asynOctetRead")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))BARCODE_TYPE")
        field(VAL, "None")
	field(SCAN, "I/O Intr")
}

######################################################################
# Number of codes in the image
######################################################################

record(ao, "$(P)$(R)NumberCodes")
{
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))NUMBER_CODES")
	field(VAL, "0")
}

record(ai, "$(P)$(R)NumberCodes_RBV")
{
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))NUMBER_CODES")
	field(SCAN, "I/O Intr")
}	

#####################################################################
# X-Values of the cooridnates of corners of discovered barcodes
#####################################################################

record(ao, "$(P)$(R)UpperRightX")
{
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_RIGHT_X")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)UpperLeftX")
{
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_LEFT_X")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)LowerRightX")
{
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOWER_RIGHT_X")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)LowerLeftX")
{
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOWER_LEFT_X")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)UpperLeftX_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_LEFT")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)UpperRightX_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_RIGHT_X")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)LowerLeftX_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Lower_LEFT_X")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)LowerRightX_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOWER_RIGHT_X")
	field(SCAN, "I/O Intr")
}

#########################################################################
# Y-Values of the cooridnates of corners of discovered barcodes
#########################################################################

record(ao, "$(P)$(R)UpperRightY")
{
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_RIGHT_Y")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)UpperLeftY")
{
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_LEFT_Y")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)LowerRightY")
{
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOWER_RIGHT_Y")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)LowerLeftY")
{
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOWER_LEFT_Y")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)UpperLeftY_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_LEFT_Y")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)UpperRightY_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))UPPER_RIGHT_Y")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)LowerLeftY_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))Lower_LEFT_Y")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)LowerRightY_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LOWER_RIGHT_Y")
	field(SCAN, "I/O Intr")
}
